-  name: "Making Selinux Disabled"
   selinux:
      policy: targeted
      state: disabled

-  name: Creating Docker Repo
   yum_repository:
      name: docker
      baseurl: "{{ docker_repo_url }}"
      description: "This is Docker Repo"
      gpgcheck: no

-  name: "Installing Docker"
   yum:
      name: "docker-ce"
      state: present
      allow_downgrade: True

-  name: "Starting Docker"
   service:
      name: "{{ docker_svc }}"
      state: started
      enabled: yes

-  name: "Creating Kubernetes Repo"
   yum_repository:
      name: "Kubernetes"
      description: "This repo will install kubeadm, kubelet, kubectl"
      baseurl: "{{ k8s_repo_url }}"
      enabled: True
      gpgcheck: False

-  name: "Creating Kubernetes Repo for Redhat"
   yum_repository:
       name: "kubernetes"
       description: "Kubernetes repo"
       baseurl: "{{ k8s_repo_url }}"
       gpgkey: "{{ k8s_gpg_url }}"
       enabled: True
       gpgcheck: True
       repo_gpgcheck: True
       register: repo
   when: ansible_distribution=='RedHat'

-  name: "Installing kubeadm, kubelet, kubectl"
   yum:
      name: "{{ k8s_repo_pkg }}"
      state: present


-  name: "Starting kubelet service"
   service:
      name: kubelet
      state: started
      enabled: True

-  name: "Pulling Images"
   command: "kubeadm config images pull"
   when: inventory_hostname in groups['aws_master']

#Resolving Warning-1 Part-1      
-  name: "Creating file in docker and in next task will be edited"
   file:
      path: "{{ docker_driver_path }}"
      state: touch

#Resolving Warning-1 Part-2         
-  name: "Changing docker driver to systemd"
   copy: 
      src: "./files/daemon.json"
      dest: "{{ docker_driver_path }}"
      force: yes
               
-  name: "Restarting Docker Service"
   service: 
      name: "{{ docker_svc }}"
      state: restarted

#Resolving Warning-2
-  name: "Installing {{ warning2_pkg }} package"
   yum:
      name: "{{ warning2_pkg }}"
      state: present

#Resolving Warning-3    
-  name: Doing swap off
   command: "swapoff -a"

-  name: "Restarting Docker Service"
   service:
      name: "{{ docker_svc }}"
      state: restarted
   when: inventory_hostname in groups['aws_master']

- name: "Copying k8s.conf file"
  copy:
      src: "./files/k8s.conf"
      dest: "{{ k8s_conf_path }}"
      force: yes

-  name: "running sysctl command"
   command: "sysctl --system"

-  name: Copying admin.conf file
   copy:
        src: "/etc/kubernetes/admin.conf"
        dest: "{{ k8s_dir_path }}/config"
        remote_src: yes
   when: inventory_hostname in groups['aws_master']


-  name: "Creating Directory to store flannel yaml file"
   file:
        path: "/k8s"
        state: directory
   when: inventory_hostname in groups['aws_master']

-  name: "Downloading FLannel"
   get_url:
        url: "{{ flannel_url }}"
        dest: "/k8s/"
   when: inventory_hostname in groups['aws_master']


#Creating Containers and Configuring Master

-  name: "Start the Cluster"
   command: "kubeadm init --pod-network-cidr={{ cidr_range }} --control-plane-endpoint={{ ansible_ssh_host }}:6443  --ignore-preflight-errors=NumCPU --ignore-preflight-errors=Mem"
   register: master_config
   when: inventory_hostname in groups['aws_master']

-  name: debug
   debug:
        msg: "{{ master_config }}"
   when: inventory_hostname in groups['aws_master']

-  name: Setup kubeconfig for home user
   shell: "{{ item }}"
   with_items:
         - "mkdir -p $HOME/.kube"
         - "cp -i /etc/kubernetes/admin.conf $HOME/.kube/config"
         - "chown $(id -u):$(id -g) $HOME/.kube/config"
   when: inventory_hostname in groups['aws_master']

-  name: Install Flannel pod network
   command: "sudo kubectl apply -f kube-flannel.yml"
   args:
        chdir: /k8s/
   when: inventory_hostname in groups['aws_master']

-  name: "Creating Token for Slaves"
   command: "kubeadm token create --print-join-command"
   register: token_result
   when: inventory_hostname in groups['aws_master']

-  name: "Adding token to a File"
   lineinfile:
        regexp: "^token: " 
        line: "token: {{ token_result.stdout }}"
        dest: "{{ file_dest }}"
        state: present
   delegate_to: localhost
   when: inventory_hostname in groups['aws_master']

-  name: Fetching Credentials File
   fetch: 
        src: "{{ k8s_dir_path }}/config"
        dest: "./creds/"
        flat: yes
   when: inventory_hostname in groups['aws_master']