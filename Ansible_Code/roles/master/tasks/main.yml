---
# tasks file for master

-  name: "Making Selinux Disabled"
   selinux:
      policy: targeted
      state: disabled

-  name: Creating Docker Repo
   yum_repository:
      name: docker
      baseurl: "{{ docker_repo_url }}"
      description: "This is Docker Repo"
      gpgcheck: no

-  name: "Installing Docker"
   yum:
      name: "{{ docker_pkg }}"
      state: present
      allow_downgrade: True

-  name: "Starting Docker"
   service:
       name: "{{ docker_svc }}"
       state: started
       enabled: yes

-  name: "Creating Kubernetes Repo for Redhat"
   yum_repository:
       name: "kubernetes"
       description: "Kubernetes repo"
       baseurl: "{{ k8s_repo_url }}"
       gpgkey: "{{ k8s_gpg_url }}"
       enabled: True
       gpgcheck: True
       repo_gpgcheck: True
       register: repo
   when: ansible_distribution=='RedHat'

-  name: "Creating Kubernetes Repo for Centos"
   yum_repository:
       name: "kubernetes"
       description: "Kubernetes repo"
       baseurl: "{{ k8s_repo_url }}"
       enabled: True
       gpgcheck: False
       repo_gpgcheck: False
   register: repo

-  name: "Installing kubeadm, kubelet, kubectl"
   yum:
       name: "{{ k8s_repo_pkg }}"
       state: present
   register: kubeadm

-  name: "Starting kubelet service"
   service:
       name: kubelet
       state: started
       enabled: True

-  name: "Pulling Images"
   command: "kubeadm config images pull"

#Resolving Warning-1 Part-1
-  name: "Creating file in docker and in next task will be edited"
   file:
       path: "{{ docker_driver_path }}"
       state: touch

#Resolving Warning-1 Part-2
-  name: "Changing docker driver to systemd"
   copy:
       src: "./files/daemon.json"
       dest: "{{ docker_driver_path }}"
       force: yes

-  name: "Restarting Docker Service"
   service:
        name: "{{ docker_svc }}"
        state: restarted

#Resolving Warning-2
-  name: "Installing {{ warning2_pkg }} package"
   yum:
        name: "{{ warning2_pkg }}"
        state: present
   when: ansible_distribution=='RedHat'


#Resolving SWAP Error

-  name: Remove swapfile from /etc/fstab
   mount:
      name: "{{ item }}"
      fstype: swap
      state: absent
   with_items:
      - swap
      - none

-  name: "Doing swap off"
   command: "swapoff -a"
   register: s
   when: ansible_distribution=='RedHat'


-  name: "Restarting Docker Service"
   service:
      name: "{{ docker_svc }}"
      state: restarted

- name: "Copying k8s.conf file"
  copy:
      src: "./files/k8s.conf"
      dest: "{{ k8s_conf_path }}"
      force: yes

-  name: "running sysctl command"
   command: "sysctl --system"

-  name: "Creating Directory to store flannel yaml file"
   file:
        path: "/k8s"
        state: directory

-  name: "Downloading FLannel1"
   get_url:
        url: "{{ flannel_url1 }}"
        dest: "/k8s/"

-  name: "Downloading FLannel2"
   get_url:
        url: "{{ flannel_url2 }}"
        dest: "/k8s/"


-  name: Set network in the $HOME/kube-flannel.yml file
   lineinfile:
        path: /k8s/kube-flannel.yml
        regexp: '\"Network\":*'
        line: "      \"Network\": \"{{ cidr_range }}\","

#Creating Containers and Configuring Master

-  name: "Start the Cluster"
   command: "kubeadm init --pod-network-cidr={{ cidr_range }} --control-plane-endpoint={{ ansible_ssh_host }}:6443  --ignore-preflight-errors=NumCPU --ignore-preflight-errors=Mem"
   register: master_config

-  name: debug
   debug:
        msg: "{{ master_config }}"

-  name: Create /.kube directory
   file:
        path: $HOME/.kube
        state: directory

-  name: Copy kubernetes admin.conf file to /.kube/
   copy:
        src: /etc/kubernetes/admin.conf
        dest: $HOME/.kube/config
        remote_src: yes

-  name: Change ownership of /.kube/config
   file:
        path: $HOME/.kube/config
        owner: "centos"
        group: "centos"

-  name: Install Flannel pod network
   command: "sudo kubectl apply -f kube-flannel.yml"
   args:
        chdir: /k8s/

-  name: "Creating Token for Slaves"
   command: "kubeadm token create --print-join-command"
   register: token_result

-  name: "Adding token to a File"
   lineinfile:
        regexp: "^token: " 
        line: "token: {{ token_result.stdout }}"
        dest: "{{ file_dest }}"
        state: present
   delegate_to: localhost

-  name: Fetching Credentials File
   fetch: 
        src: "{{ k8s_dir_path }}/config"
        dest: "./creds/"
        flat: yes
